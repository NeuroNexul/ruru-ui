{
  "name": "input",
  "files": [
    {
      "name": "input.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cn } from \"@/utils/cn\";\r\nimport { EyeClosedIcon, EyeOpenIcon } from \"@radix-ui/react-icons\";\r\n\r\nexport interface InputProps\r\n  extends Omit<\r\n    React.InputHTMLAttributes<HTMLInputElement>,\r\n    \"children\" | \"prefix\" | \"suffix\"\r\n  > {\r\n  \r\n  className?: string;\r\n  \r\n  iclassName?: string;\r\n  \r\n  prefix?: React.ReactNode | string;\r\n  \r\n  suffix?: React.ReactNode | string;\r\n  \r\n  prefixStyling?: boolean;\r\n  \r\n  label?: string;\r\n  \r\n  suffixStyling?: boolean;\r\n  \r\n  error?: string;\r\n}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  (\r\n    {\r\n      className,\r\n      iclassName,\r\n      prefix,\r\n      suffix,\r\n      prefixStyling = true,\r\n      suffixStyling = true,\r\n      label,\r\n      type,\r\n      error,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    \r\n    const prefixRef = React.useRef<HTMLDivElement>(null);\r\n    const suffixRef = React.useRef<HTMLDivElement>(null);\r\n    \r\n    const [prefixWidth, setPrefixWidth] = React.useState(0);\r\n    const [suffixWidth, setSuffixWidth] = React.useState(0);\r\n    \r\n    React.useEffect(() => {\r\n      if (prefixRef.current) {\r\n        setPrefixWidth(prefixRef.current.offsetWidth);\r\n      }\r\n      if (suffixRef.current) {\r\n        setSuffixWidth(suffixRef.current.offsetWidth);\r\n      }\r\n    }, [prefix, suffix]);\r\n\r\n    return (\r\n      <div className={cn(\"relative\", className)}>\r\n        {label && (\r\n          <label\r\n            className={`text-sm ${error ? \"text-[#ff6166]\" : \"text-muted-foreground\"} `}\r\n            htmlFor={props.id}\r\n          >\r\n            {label}\r\n          </label>\r\n        )}\r\n        {prefix && (\r\n          <div\r\n            ref={prefixRef}\r\n            className={cn(\r\n              \"absolute top-0 left-0 h-full flex items-center justify-center pl-2 text-muted-foreground\",\r\n              `${prefixStyling ? \"rounded-l-md\" : \"\"}`,\r\n            )}\r\n          >\r\n            {prefix}\r\n            {prefixStyling && <div className=\"h-[94%] w-px ml-2 bg-border \" />}\r\n          </div>\r\n        )}\r\n        <input\r\n          type={type}\r\n          className={cn(\r\n            \"flex w-full h-9 rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-shadow file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:border-primary/75 focus-visible:ring-primary/35 disabled:cursor-not-allowed disabled:opacity-50\",\r\n            iclassName,\r\n            `${error ? \"outline-none ring-2 ring-[#ffe6e6] border-[#ff6166] dark:ring-[#561a1e] focus-visible:dark:ring-primary/35 dark:hover:ring-[#832126] hover:ring-[#f8b9b9]\" : \"\"}`,\r\n          )}\r\n          style={{\r\n            paddingLeft: prefix ? `${prefixWidth + 12}px` : \"0.75rem\",\r\n            paddingRight: suffix ? `${suffixWidth + 12}px` : \"0.75rem\",\r\n          }}\r\n          ref={ref}\r\n          {...props}\r\n        />\r\n        {suffix && (\r\n          <div\r\n            ref={suffixRef}\r\n            className={cn(\r\n              \"absolute top-0 right-0 h-full flex items-center justify-center pr-2 text-muted-foreground\",\r\n              `${suffixStyling ? \"rounded-r-md\" : \"\"}`,\r\n            )}\r\n          >\r\n            {suffixStyling && (\r\n              <div className=\"h-[94%] w-[1px] mr-2 bg-border \" />\r\n            )}\r\n            {suffix}\r\n          </div>\r\n        )}\r\n        {error && (\r\n          <div\r\n            className=\"flex items-center text-sm text-[#ff6166] mt-1\"\r\n            role=\"alert\"\r\n          >\r\n            <svg\r\n              data-testid=\"geist-icon\"\r\n              height=\"16\"\r\n              strokeLinejoin=\"round\"\r\n              viewBox=\"0 0 16 16\"\r\n              width=\"16\"\r\n              style={{ color: \"currentcolor\" }}\r\n            >\r\n              <path\r\n                fillRule=\"evenodd\"\r\n                clipRule=\"evenodd\"\r\n                d=\"M5.30761 1.5L1.5 5.30761L1.5 10.6924L5.30761 14.5H10.6924L14.5 10.6924V5.30761L10.6924 1.5H5.30761ZM5.10051 0C4.83529 0 4.58094 0.105357 4.3934 0.292893L0.292893 4.3934C0.105357 4.58094 0 4.83529 0 5.10051V10.8995C0 11.1647 0.105357 11.4191 0.292894 11.6066L4.3934 15.7071C4.58094 15.8946 4.83529 16 5.10051 16H10.8995C11.1647 16 11.4191 15.8946 11.6066 15.7071L15.7071 11.6066C15.8946 11.4191 16 11.1647 16 10.8995V5.10051C16 4.83529 15.8946 4.58093 15.7071 4.3934L11.6066 0.292893C11.4191 0.105357 11.1647 0 10.8995 0H5.10051ZM8.75 3.75V4.5V8L8.75 8.75H7.25V8V4.5V3.75H8.75ZM8 12C8.55229 12 9 11.5523 9 11C9 10.4477 8.55229 10 8 10C7.44772 10 7 10.4477 7 11C7 11.5523 7.44772 12 8 12Z\"\r\n                fill=\"currentColor\"\r\n              ></path>\r\n            </svg>\r\n            <label className=\"ml-1\" htmlFor=\"error\">\r\n              {error}\r\n            </label>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nInput.displayName = \"Input\";\r\n\r\nexport interface SearchInputProps\r\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"children\"> {\r\n  \r\n  enablePrefixStyling?: boolean;\r\n}\r\n\r\nconst SearchInput = React.forwardRef<HTMLInputElement, SearchInputProps>(\r\n  ({ enablePrefixStyling = false, ...props }, ref) => {\r\n    return (\r\n      <Input\r\n        type=\"search\"\r\n        prefix={\r\n          <svg\r\n            width=\"15\"\r\n            height=\"15\"\r\n            viewBox=\"0 0 15 15\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z\"\r\n              fill=\"currentColor\"\r\n              fillRule=\"evenodd\"\r\n              clipRule=\"evenodd\"\r\n            ></path>\r\n          </svg>\r\n        }\r\n        prefixStyling={enablePrefixStyling}\r\n        className={cn(\"rounded-full\", props.className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\n\r\nSearchInput.displayName = \"SearchInput\";\r\n\r\nconst PasswordInput = React.forwardRef<\r\n  HTMLInputElement,\r\n  Omit<InputProps, \"label\" | \"error\">\r\n>(({ className, ...props }, ref) => {\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Input\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        iclassName=\"hide-password-toggle\"\r\n        className={className}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n      <button\r\n        type=\"button\"\r\n        className={\r\n          \"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\r\n        }\r\n        onClick={() => setShowPassword((prev) => !prev)}\r\n        disabled={props.disabled}\r\n      >\r\n        {showPassword ? (\r\n          <EyeOpenIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\r\n        ) : (\r\n          <EyeClosedIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\r\n        )}\r\n        <span className=\"sr-only\">\r\n          {showPassword ? \"Hide password\" : \"Show password\"}\r\n        </span>\r\n      </button>\r\n\r\n      {}\r\n      <style>{`\r\n\t\t\t\t\t.hide-password-toggle::-ms-reveal,\r\n\t\t\t\t\t.hide-password-toggle::-ms-clear {\r\n\t\t\t\t\t\tvisibility: hidden;\r\n\t\t\t\t\t\tpointer-events: none;\r\n\t\t\t\t\t\tdisplay: none;\r\n\t\t\t\t\t}\r\n\t\t\t\t`}</style>\r\n    </div>\r\n  );\r\n});\r\nPasswordInput.displayName = \"PasswordInput\";\r\n\r\nexport { Input, SearchInput, PasswordInput };\r\n"
    }
  ],
  "type": "components:ui"
}
