{
  "name": "tabs",
  "dependencies": ["@radix-ui/react-tabs"],
  "files": [
    {
      "name": "tabs.tsx",
      "content": "\"use client\";\n\nimport type {\n  TabsContentProps,\n  TabsProps as BaseProps,\n} from \"@radix-ui/react-tabs\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport React, {\n  useMemo,\n  useState,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\nimport { cn } from \"@/utils/cn\";\nimport { motion } from \"framer-motion\";\nimport { useRuru } from \"@/provider\";\n\nconst TabsPrimitiveRoot = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root>\n>((props, ref) => {\n  return (\n    <TabsPrimitive.Root\n      ref={ref}\n      {...props}\n      className={cn(\"flex flex-col overflow-hidden\", props.className)}\n    />\n  );\n});\n\nTabsPrimitiveRoot.displayName = \"TabsPrimitiveRoot\";\n\nconst AnimatedTabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ children, ...props }, ref) => {\n  const [activeIndex] = useState(0);\n  const [indicatorProps, setIndicatorProps] = useState({\n    width: 0,\n    left: 0,\n  });\n  const [hasMounted, setHasMounted] = useState(false);\n\n  const listRef = useRef<HTMLDivElement | null>(null);\n\n  useLayoutEffect(() => {\n    if (!listRef.current) return;\n\n    const activeTab = listRef.current.querySelector(\n      '[data-state=\"active\"]',\n    ) as HTMLButtonElement | null;\n\n    if (activeTab) {\n      setIndicatorProps({\n        width: activeTab.offsetWidth,\n        left: activeTab.offsetLeft,\n      });\n    }\n\n    if (!hasMounted) {\n      setHasMounted(true);\n    }\n  }, [activeIndex, children, hasMounted]);\n\n  return (\n    <TabsPrimitive.List\n      ref={(node) => {\n        listRef.current = node;\n        if (typeof ref === \"function\") ref(node);\n        else if (ref) ref.current = node;\n      }}\n      {...props}\n      className={cn(\n        \"relative flex flex-row items-end gap-4 overflow-x-auto px-4 border-b\",\n        props.className,\n      )}\n    >\n      {children}\n      <motion.div\n        className=\"absolute bottom-0 h-[2px] bg-primary\"\n        animate={\n          hasMounted\n            ? { width: indicatorProps.width, left: indicatorProps.left }\n            : false\n        }\n        transition={{ type: \"spring\", stiffness: 500, damping: 30 }}\n      />\n    </TabsPrimitive.List>\n  );\n});\nAnimatedTabsList.displayName = \"AnimatedTabsList\";\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>((props, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    {...props}\n    className={cn(\n      \"flex flex-row items-end gap-4 overflow-x-auto px-4 border-b\",\n      props.className,\n    )}\n  />\n));\nTabsList.displayName = \"TabsList\";\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>((props, ref) => {\n  const { animation } = useRuru();\n  return (\n    <TabsPrimitive.Trigger\n      ref={ref}\n      {...props}\n      className={cn(\n        \"whitespace-nowrap py-2 text-sm font-medium transition-colors hover:text-primary disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-primary text-muted-foreground mx-1 \",\n        props.className,\n        !animation &&\n          \"border-b border-transparent data-[state=active]:border-primary\",\n      )}\n    />\n  );\n});\nTabsTrigger.displayName = \"TabsTrigger\";\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>((props, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    {...props}\n    className={cn(\"p-4\", props.className)}\n  />\n));\nTabsContent.displayName = \"TabsContent\";\n\ntype ChangeListener = (v: string) => void;\nconst listeners = new Map<string, ChangeListener[]>();\n\nfunction addChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  list.push(listener);\n  listeners.set(id, list);\n}\n\nfunction removeChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  listeners.set(\n    id,\n    list.filter((item) => item !== listener),\n  );\n}\n\nfunction update(id: string, v: string, persist: boolean): void {\n  listeners.get(id)?.forEach((item) => {\n    item(v);\n  });\n\n  if (persist) localStorage.setItem(id, v);\n  else sessionStorage.setItem(id, v);\n}\n\nexport interface TabsProps extends BaseProps {\n  \n  groupId?: string;\n  \n  persist?: boolean;\n  \n  defaultIndex?: number;\n  \n  disabled?: boolean;\n  \n  items?: string[];\n}\n\nexport function Tabs({\n  groupId,\n  items = [],\n  persist = false,\n  defaultIndex = 0,\n  disabled = false,\n  ...props\n}: TabsProps): React.ReactElement {\n  const { animation } = useRuru();\n  const values = useMemo(() => items.map((item) => toValue(item)), [items]);\n  const [value, setValue] = useState(values[defaultIndex]);\n\n  useLayoutEffect(() => {\n    if (!groupId) return;\n\n    const onUpdate: ChangeListener = (v) => {\n      if (values.includes(v)) setValue(v);\n    };\n\n    const previous = persist\n      ? localStorage.getItem(groupId)\n      : sessionStorage.getItem(groupId);\n\n    if (previous) onUpdate(previous);\n    addChangeListener(groupId, onUpdate);\n    return () => {\n      removeChangeListener(groupId, onUpdate);\n    };\n  }, [groupId, persist, values]);\n\n  const onValueChange = useCallback(\n    (v: string) => {\n      if (groupId) {\n        update(groupId, v, persist);\n      } else {\n        setValue(v);\n      }\n    },\n    [groupId, persist],\n  );\n\n  return (\n    <TabsPrimitiveRoot\n      value={value}\n      onValueChange={onValueChange}\n      {...props}\n      className={cn(\"my-4\", props.className)}\n    >\n      {animation ? (\n        <AnimatedTabsList>\n          {values.map((v, i) => (\n            <TabsTrigger\n              className=\"relative \"\n              disabled={disabled}\n              key={v}\n              value={v}\n            >\n              {items[i]}\n            </TabsTrigger>\n          ))}\n        </AnimatedTabsList>\n      ) : (\n        <TabsList>\n          {values.map((v, i) => (\n            <TabsTrigger disabled={disabled} key={v} value={v}>\n              {items[i]}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n      )}\n      {props.children}\n    </TabsPrimitiveRoot>\n  );\n}\n\nfunction toValue(v: string): string {\n  return v.toLowerCase().replace(/\\s/, \"-\");\n}\n\nexport function Tab({\n  value,\n  className,\n  ...props\n}: TabsContentProps): React.ReactElement {\n  return (\n    <TabsContent\n      value={toValue(value)}\n      className={cn(\n        \"prose-no-margin [&>figure:only-child]:-m-4 [&>figure:only-child]:rounded-none [&>figure:only-child]:border-none\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { TabsList, TabsTrigger, TabsContent };\n"
    }
  ],
  "type": "components:ui"
}
