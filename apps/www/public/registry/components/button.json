{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "\"use client\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport React from \"react\";\nimport { cn } from \"@/utils/cn\";\nimport { Spinner } from \"./spinner\";\nexport const buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/85 hover:shadow-md\",\n        secondary:\n          \"border-input border-[1.5px] bg-primary-foreground hover:bg-[#f3f3f3] dark:hover:bg-[#202020]\",\n        tertiary: \"text-primary hover:bg-[#f3f3f3] dark:hover:bg-[#202020]\",\n        error: \"bg-[#d93036] hover:bg-[#ff6166]\",\n        warning: \"bg-[#ff990a] text-primary-foreground hover:bg-[#d27504]\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        small: \"h-8 rounded-md px-3 text-xs\",\n        large: \"h-10 rounded-md px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\nexport interface ButtonProps\n  extends Omit<\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\n      \"prefix\" | \"suffix\"\n    >,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  disabled?: boolean;\n  loading?: boolean;\n}\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant = \"default\",\n      size = \"default\",\n      asChild = false,\n      prefix,\n      suffix,\n      disabled = false,\n      loading = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <div className={disabled ? \" cursor-not-allowed \" : undefined}>\n        <Comp\n          className={cn(buttonVariants({ variant, size }), className)}\n          ref={ref}\n          disabled={disabled}\n          {...props}\n        >\n          {loading ? <Spinner className=\"mr-2\" /> : null}\n          {prefix ? (\n            <span className=\"mr-2 flex items-center justify-center\">\n              {prefix}\n            </span>\n          ) : null}\n          {props.children}\n          {suffix ? (\n            <span className=\"ml-2 flex items-center justify-center\">\n              {suffix}\n            </span>\n          ) : null}\n        </Comp>\n      </div>\n    );\n  },\n);\nButton.displayName = \"Button\";\n"
    }
  ],
  "type": "components:ui",
  "subcategory": [
    "spinner"
  ]
}