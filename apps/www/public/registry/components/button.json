{
  "name": "button",
  "dependencies": ["@radix-ui/react-slot"],
  "files": [
    {
      "name": "button.tsx",
      "content": "\"use client\";\r\n\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport React from \"react\";\r\nimport { cn } from \"@/utils/cn\";\r\nimport { Spinner } from \"./spinner\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useRuru } from \"@/provider\";\r\n\r\nexport const buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/85\",\r\n        secondary:\r\n          \"border-input border-[1.5px] bg-secondary/55 hover:bg-secondary\",\r\n        tertiary: \"text-primary hover:bg-accent/75\",\r\n        error: \"bg-[#d93036] hover:bg-[#ff6166]\",\r\n        warning: \"bg-[#ff990a] text-primary-foreground hover:bg-[#d27504]\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2\",\r\n        small: \"h-8 rounded-md px-3 text-xs\",\r\n        large: \"h-10 rounded-md px-8\",\r\n        icon: \"size-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends Omit<\r\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n      \"prefix\" | \"suffix\"\r\n    >,\r\n    VariantProps<typeof buttonVariants> {\r\n  \r\n  asChild?: boolean;\r\n  \r\n  prefix?: React.ReactNode;\r\n  \r\n  suffix?: React.ReactNode;\r\n  \r\n  disabled?: boolean;\r\n  \r\n  loading?: boolean;\r\n}\r\n\r\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      asChild = false,\r\n      prefix,\r\n      suffix,\r\n      disabled = false,\r\n      loading = false,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { animation } = useRuru();\r\n\r\n    const Comp = asChild ? Slot : \"button\";\r\n\r\n    const buttonContent = (\r\n      <Comp\r\n        className={cn(\r\n          buttonVariants({\r\n            variant: loading ? \"secondary\" : variant,\r\n            size,\r\n          }),\r\n          className,\r\n        )}\r\n        ref={ref}\r\n        disabled={disabled}\r\n        {...props}\r\n      >\r\n        {loading ? <Spinner className=\"mr-2\" /> : null}\r\n        {prefix ? (\r\n          <span className=\"mr-2 flex items-center justify-center\">\r\n            {prefix}\r\n          </span>\r\n        ) : null}\r\n        {props.children}\r\n        {suffix ? (\r\n          <span className=\"ml-2 flex items-center justify-center\">\r\n            {suffix}\r\n          </span>\r\n        ) : null}\r\n      </Comp>\r\n    );\r\n\r\n    return (\r\n      <div className={cn(className, disabled && \"cursor-not-allowed \")}>\r\n        {animation ? (\r\n          <motion.div whileTap={{ scale: 0.93 }}>{buttonContent}</motion.div>\r\n        ) : (\r\n          buttonContent\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nButton.displayName = \"Button\";\r\n"
    }
  ],
  "type": "components:ui",
  "subcategory": ["spinner"]
}
