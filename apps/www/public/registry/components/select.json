{
  "name": "select",
  "dependencies": ["@radix-ui/react-select", "@radix-ui/react-icons"],
  "files": [
    {
      "name": "select.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  CaretSortIcon,\r\n  CheckIcon,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n} from \"@radix-ui/react-icons\";\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\r\nimport { cn } from \"@/utils/cn\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useRuru } from \"@/provider\";\r\n\r\nconst Select = SelectPrimitive.Root;\r\nconst SelectGroup = SelectPrimitive.Group;\r\nconst SelectValue = SelectPrimitive.Value;\r\n\r\nexport const selectAnimationVariants = {\r\n  zoom: {\r\n    initial: { opacity: 0, scale: 0.9 },\r\n    animate: { opacity: 1, scale: 1 },\r\n    exit: { opacity: 0, scale: 0.9 },\r\n    transition: { type: \"spring\", stiffness: 600, damping: 25 },\r\n  },\r\n  scaleBounce: {\r\n    initial: { opacity: 0, scale: 0.5 },\r\n    animate: { opacity: 1, scale: [1.2, 0.9, 1] },\r\n    exit: { opacity: 0, scale: 0.5 },\r\n    transition: { type: \"spring\", stiffness: 600, damping: 20 },\r\n  },\r\n  fade: {\r\n    initial: { opacity: 0 },\r\n    animate: { opacity: 1 },\r\n    exit: { opacity: 0 },\r\n    transition: { duration: 0.3 },\r\n  },\r\n  slideUp: {\r\n    initial: { opacity: 0, y: 20 },\r\n    animate: { opacity: 1, y: 0 },\r\n    exit: { opacity: 0, y: 20 },\r\n    transition: { type: \"spring\", stiffness: 500, damping: 20 },\r\n  },\r\n  slideDown: {\r\n    initial: { opacity: 0, y: -20 },\r\n    animate: { opacity: 1, y: 0 },\r\n    exit: { opacity: 0, y: -20 },\r\n    transition: { type: \"spring\", stiffness: 500, damping: 20 },\r\n  },\r\n  slideRight: {\r\n    initial: { opacity: 0, x: -30 },\r\n    animate: { opacity: 1, x: 0 },\r\n    exit: { opacity: 0, x: -30 },\r\n    transition: { type: \"spring\", stiffness: 400, damping: 20 },\r\n  },\r\n  slideLeft: {\r\n    initial: { opacity: 0, x: 30 },\r\n    animate: { opacity: 1, x: 0 },\r\n    exit: { opacity: 0, x: 30 },\r\n    transition: { type: \"spring\", stiffness: 400, damping: 20 },\r\n  },\r\n  flip: {\r\n    initial: { opacity: 0, rotateY: 90 },\r\n    animate: { opacity: 1, rotateY: 0 },\r\n    exit: { opacity: 0, rotateY: 90 },\r\n    transition: { type: \"spring\", stiffness: 500, damping: 30 },\r\n  },\r\n  rotate: {\r\n    initial: { opacity: 0, rotate: -180 },\r\n    animate: { opacity: 1, rotate: 0 },\r\n    exit: { opacity: 0, rotate: -180 },\r\n    transition: { type: \"spring\", stiffness: 500, damping: 25 },\r\n  },\r\n};\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & {\r\n    enableAnimation?: boolean;\r\n  }\r\n>(({ className, children, enableAnimation = false, ...props }, ref) => {\r\n  const { animation } = useRuru();\r\n  return animation && enableAnimation ? (\r\n    <motion.div whileTap={{ scale: 0.93 }}>\r\n      <SelectPrimitive.Trigger\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:border-primary/75 focus:dark:ring-primary/35 focus:ring-primary/35 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <SelectPrimitive.Icon asChild>\r\n          <CaretSortIcon className=\"h-4 w-4 opacity-50\" />\r\n        </SelectPrimitive.Icon>\r\n      </SelectPrimitive.Trigger>\r\n    </motion.div>\r\n  ) : (\r\n    <SelectPrimitive.Trigger\r\n      ref={ref}\r\n      className={cn(\r\n        \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:border-primary/75 focus:dark:ring-primary/35 focus:ring-primary/35 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <SelectPrimitive.Icon asChild>\r\n        <CaretSortIcon className=\"h-4 w-4 opacity-50\" />\r\n      </SelectPrimitive.Icon>\r\n    </SelectPrimitive.Trigger>\r\n  );\r\n});\r\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\r\n\r\nconst SelectScrollUpButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollUpButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1 w-full absolute top-0 bg-popover z-10\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronUpIcon />\r\n  </SelectPrimitive.ScrollUpButton>\r\n));\r\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\r\n\r\nconst SelectScrollDownButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollDownButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1 w-full absolute bottom-0 bg-popover z-10\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronDownIcon />\r\n  </SelectPrimitive.ScrollDownButton>\r\n));\r\nSelectScrollDownButton.displayName =\r\n  SelectPrimitive.ScrollDownButton.displayName;\r\n\r\n\r\nconst AnimatedSelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> & {\r\n    selectedVariant: keyof typeof selectAnimationVariants;\r\n  }\r\n>(\r\n  (\r\n    { className, children, position = \"popper\", selectedVariant, ...props },\r\n    ref,\r\n  ) => (\r\n    <SelectPrimitive.Portal>\r\n      <SelectPrimitive.Content\r\n        className={cn(\r\n          \"relative z-50 max-h-96 my-2 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md\",\r\n          position === \"popper\" &&\r\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n          className,\r\n        )}\r\n        ref={ref}\r\n        asChild\r\n        position={position}\r\n        {...props}\r\n      >\r\n        <motion.div\r\n          className={cn(\r\n            \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md\",\r\n            className,\r\n          )}\r\n          {...selectAnimationVariants[selectedVariant]}\r\n        >\r\n          <SelectScrollUpButton />\r\n          <SelectPrimitive.Viewport\r\n            className={cn(\r\n              \"p-1\",\r\n              position === \"popper\" &&\r\n                \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\r\n            )}\r\n          >\r\n            {children}\r\n          </SelectPrimitive.Viewport>\r\n          <SelectScrollDownButton />\r\n        </motion.div>\r\n      </SelectPrimitive.Content>\r\n    </SelectPrimitive.Portal>\r\n  ),\r\n);\r\nAnimatedSelectContent.displayName = SelectPrimitive.Content.displayName;\r\n\r\n\r\nconst StaticSelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\r\n>(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className,\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectScrollUpButton />\r\n      <SelectPrimitive.Viewport\r\n        className={cn(\r\n          \"p-1\",\r\n          position === \"popper\" &&\r\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\r\n        )}\r\n      >\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n      <SelectScrollDownButton />\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n));\r\nStaticSelectContent.displayName = SelectPrimitive.Content.displayName;\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> & {\r\n    variants?: keyof typeof selectAnimationVariants;\r\n  }\r\n>((props, ref) => {\r\n  const { animation } = useRuru();\r\n  const selectedVariant = props.variants || \"zoom\";\r\n\r\n  return animation ? (\r\n    <AnimatedSelectContent\r\n      selectedVariant={selectedVariant}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  ) : (\r\n    <StaticSelectContent ref={ref} {...props} />\r\n  );\r\n});\r\n\r\nSelectContent.displayName = \"SelectContent\";\r\n\r\nconst SelectLabel = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\r\n    {...props}\r\n  />\r\n));\r\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <CheckIcon className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n));\r\nSelectItem.displayName = SelectPrimitive.Item.displayName;\r\n\r\nconst SelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n));\r\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\r\n\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectLabel,\r\n  SelectItem,\r\n  SelectSeparator,\r\n  SelectScrollUpButton,\r\n  SelectScrollDownButton,\r\n};\r\n"
    }
  ],
  "type": "components:ui"
}
