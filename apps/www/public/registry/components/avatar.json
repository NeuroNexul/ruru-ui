{
  "name": "avatar",
  "files": [
    {
      "name": "avatar.tsx",
      "content": "import * as React from \"react\";\nimport { cn } from \"@/utils/cn\";\n\n\ntype AvatarProps = Omit<\n  React.ComponentPropsWithoutRef<\"img\">,\n  \"src\" | \"alt\"\n> & {\n  \n  className?: string;\n  \n  size?: number;\n  \n  placeholder?: string;\n  \n  src: string;\n};\n\n\nconst Avatar = React.forwardRef<HTMLImageElement, AvatarProps>(\n  ({ className, size = 30, src, placeholder, ...props }, ref) => {\n    return (\n      <img\n        className={cn(`rounded-full border`, className)}\n        aria-label=\"avatar\"\n        ref={ref}\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n        }}\n        src={src}\n        alt={placeholder}\n        {...props}\n      />\n    );\n  },\n);\nAvatar.displayName = \"Avatar\";\n\ntype AvatarGroupProps = Omit<\n  React.ComponentPropsWithoutRef<\"div\">,\n  \"children\"\n> & {\n  \n  className?: string;\n  \n  members: { src: string; alt: string }[];\n  \n  size?: number;\n  \n  limit?: number;\n  aClassName?: string;\n  lnClassName?: string;\n};\n\nconst AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\n  (\n    { className, aClassName, lnClassName, size = 30, members, limit, ...props },\n    ref,\n  ) => {\n    const displayedMembers =\n      limit && members.length > limit ? members.slice(0, limit - 1) : members;\n    const extraMembersCount =\n      limit && members.length > limit ? members.length - limit + 1 : 0;\n\n    return (\n      <div className={cn(`flex`, className)} ref={ref} {...props}>\n        {displayedMembers.map((member, index) => (\n          <Avatar\n            key={index}\n            className={cn(`-ml-2 border`, aClassName)}\n            size={size}\n            src={member.src}\n            placeholder={member.alt}\n          />\n        ))}\n        {extraMembersCount > 0 && (\n          <div\n            className={cn(\n              `lastcount -ml-2 flex items-center justify-center rounded-full border bg-primary-foreground`,\n              lnClassName,\n            )}\n            style={{\n              width: `${size}px`,\n              height: `${size}px`,\n            }}\n          >\n            +{extraMembersCount}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nAvatarGroup.displayName = \"AvatarGroup\";\n\ntype AvatarWithBadgeProps = Omit<\n  React.ComponentPropsWithoutRef<\"div\">,\n  \"children\"\n> & {\n  \n  className?: string;\n  \n  size?: number;\n  \n  src: string;\n  \n  placeholder?: string;\n  \n  badgeSrc: string;\n  iClassName?: string;\n  sClassName?: string;\n};\n\n\nconst AvatarWithBadge = React.forwardRef<HTMLDivElement, AvatarWithBadgeProps>(\n  (\n    {\n      className,\n      sClassName,\n      iClassName,\n      size = 30,\n      src,\n      placeholder,\n      badgeSrc,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <div\n        className={cn(\"relative inline-block\", className)}\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n        }}\n        ref={ref}\n        {...props}\n      >\n        <img\n          className={cn(\"rounded-full border\", iClassName)}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n          }}\n          src={src}\n          alt={placeholder}\n        />\n        <img\n          className={cn(\n            \"absolute bottom-0 left-0 rounded-full border\",\n            sClassName,\n          )}\n          style={{\n            width: `${size / 3}px`,\n            height: `${size / 3}px`,\n          }}\n          src={badgeSrc}\n          alt=\"badge\"\n        />\n      </div>\n    );\n  },\n);\nAvatarWithBadge.displayName = \"AvatarWithBadge\";\n\nexport { Avatar, AvatarGroup, AvatarWithBadge };\n"
    }
  ],
  "type": "components:ui"
}
